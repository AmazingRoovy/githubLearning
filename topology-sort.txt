#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
int MAX_N = 100;
vector <int> g[MAX_N]; 
bool used[MAX_N];
vector <int> ans;
 
void dfs (int v) {
	used[v] = true;
	for (size_t i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if (!used[to])
			dfs(to);
	}
	ans.push_back(v);
}
 
void topological_sort() {
	for (int i = 0; i < n; ++i)
		used[i] = false;
	ans.clear();
	for (int i = 0; i < n; ++i)
		if (!used[i])
			dfs(i);
	reverse (ans.begin(), ans.end());
}

int main() {
  int n;
  //...
}